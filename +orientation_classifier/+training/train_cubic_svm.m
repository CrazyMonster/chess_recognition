function [trainedClassifier, validationAccuracy] = train_cubic_svm(trainingData)
% [trainedClassifier, validationAccuracy] = trainClassifier(trainingData)
% returns a trained classifier and its accuracy. This code recreates the
% classification model trained in Classification Learner app. Use the
% generated code to automate training the same model with new data, or to
% learn how to programmatically train models.
%
%  Input:
%      trainingData: a table containing the same predictor and response
%       columns as imported into the app.
%
%  Output:
%      trainedClassifier: a struct containing the trained classifier. The
%       struct contains various fields with information about the trained
%       classifier.
%
%      trainedClassifier.predictFcn: a function to make predictions on new
%       data.
%
%      validationAccuracy: a double containing the accuracy in percent. In
%       the app, the History list displays this overall accuracy score for
%       each model.
%
% Use the code to train the model with new data. To retrain your
% classifier, call the function from the command line with your original
% data or new data as the input argument trainingData.
%
% For example, to retrain a classifier trained with the original data set
% T, enter:
%   [trainedClassifier, validationAccuracy] = trainClassifier(T)
%
% To make predictions with the returned 'trainedClassifier' on new data T2,
% use
%   yfit = trainedClassifier.predictFcn(T2)
%
% T2 must be a table containing at least the same predictor columns as used
% during training. For details, enter:
%   trainedClassifier.HowToPredict

% Auto-generated by MATLAB on 16-Feb-2018 19:02:39


    % Extract predictors and response
    % This code processes the data into the right shape for training the
    % model.
    inputTable = trainingData;
    % Split matrices in the input table into vectors
    inputTable = [inputTable(:,setdiff(inputTable.Properties.VariableNames, {'HOG', 'ProjectionX', 'ProjectionY'})), array2table(table2array(inputTable(:,{'HOG', 'ProjectionX', 'ProjectionY'})), 'VariableNames', {'HOG_1', 'HOG_2', 'HOG_3', 'HOG_4', 'HOG_5', 'HOG_6', 'HOG_7', 'HOG_8', 'HOG_9', 'HOG_10', 'HOG_11', 'HOG_12', 'HOG_13', 'HOG_14', 'HOG_15', 'HOG_16', 'HOG_17', 'HOG_18', 'HOG_19', 'HOG_20', 'HOG_21', 'HOG_22', 'HOG_23', 'HOG_24', 'HOG_25', 'HOG_26', 'HOG_27', 'HOG_28', 'HOG_29', 'HOG_30', 'HOG_31', 'HOG_32', 'HOG_33', 'HOG_34', 'HOG_35', 'HOG_36', 'ProjectionX_1', 'ProjectionX_2', 'ProjectionX_3', 'ProjectionX_4', 'ProjectionX_5', 'ProjectionX_6', 'ProjectionX_7', 'ProjectionX_8', 'ProjectionX_9', 'ProjectionX_10', 'ProjectionX_11', 'ProjectionX_12', 'ProjectionX_13', 'ProjectionX_14', 'ProjectionX_15', 'ProjectionX_16', 'ProjectionX_17', 'ProjectionX_18', 'ProjectionX_19', 'ProjectionX_20', 'ProjectionX_21', 'ProjectionX_22', 'ProjectionX_23', 'ProjectionX_24', 'ProjectionX_25', 'ProjectionX_26', 'ProjectionX_27', 'ProjectionX_28', 'ProjectionX_29', 'ProjectionX_30', 'ProjectionX_31', 'ProjectionX_32', 'ProjectionX_33', 'ProjectionX_34', 'ProjectionX_35', 'ProjectionX_36', 'ProjectionX_37', 'ProjectionX_38', 'ProjectionX_39', 'ProjectionX_40', 'ProjectionX_41', 'ProjectionX_42', 'ProjectionX_43', 'ProjectionX_44', 'ProjectionX_45', 'ProjectionX_46', 'ProjectionX_47', 'ProjectionX_48', 'ProjectionX_49', 'ProjectionX_50', 'ProjectionX_51', 'ProjectionX_52', 'ProjectionX_53', 'ProjectionX_54', 'ProjectionX_55', 'ProjectionX_56', 'ProjectionX_57', 'ProjectionX_58', 'ProjectionX_59', 'ProjectionX_60', 'ProjectionX_61', 'ProjectionX_62', 'ProjectionX_63', 'ProjectionX_64', 'ProjectionY_1', 'ProjectionY_2', 'ProjectionY_3', 'ProjectionY_4', 'ProjectionY_5', 'ProjectionY_6', 'ProjectionY_7', 'ProjectionY_8', 'ProjectionY_9', 'ProjectionY_10', 'ProjectionY_11', 'ProjectionY_12', 'ProjectionY_13', 'ProjectionY_14', 'ProjectionY_15', 'ProjectionY_16', 'ProjectionY_17', 'ProjectionY_18', 'ProjectionY_19', 'ProjectionY_20', 'ProjectionY_21', 'ProjectionY_22', 'ProjectionY_23', 'ProjectionY_24', 'ProjectionY_25', 'ProjectionY_26', 'ProjectionY_27', 'ProjectionY_28', 'ProjectionY_29', 'ProjectionY_30', 'ProjectionY_31', 'ProjectionY_32', 'ProjectionY_33', 'ProjectionY_34', 'ProjectionY_35', 'ProjectionY_36', 'ProjectionY_37', 'ProjectionY_38', 'ProjectionY_39', 'ProjectionY_40', 'ProjectionY_41', 'ProjectionY_42', 'ProjectionY_43', 'ProjectionY_44', 'ProjectionY_45', 'ProjectionY_46', 'ProjectionY_47', 'ProjectionY_48', 'ProjectionY_49', 'ProjectionY_50', 'ProjectionY_51', 'ProjectionY_52', 'ProjectionY_53', 'ProjectionY_54', 'ProjectionY_55', 'ProjectionY_56', 'ProjectionY_57', 'ProjectionY_58', 'ProjectionY_59', 'ProjectionY_60', 'ProjectionY_61', 'ProjectionY_62', 'ProjectionY_63', 'ProjectionY_64'})];

    predictorNames = {'Mean', 'Stdev', 'HOG_1', 'HOG_2', 'HOG_3', 'HOG_4', 'HOG_5', 'HOG_6', 'HOG_7', 'HOG_8', 'HOG_9', 'HOG_10', 'HOG_11', 'HOG_12', 'HOG_13', 'HOG_14', 'HOG_15', 'HOG_16', 'HOG_17', 'HOG_18', 'HOG_19', 'HOG_20', 'HOG_21', 'HOG_22', 'HOG_23', 'HOG_24', 'HOG_25', 'HOG_26', 'HOG_27', 'HOG_28', 'HOG_29', 'HOG_30', 'HOG_31', 'HOG_32', 'HOG_33', 'HOG_34', 'HOG_35', 'HOG_36', 'ProjectionX_1', 'ProjectionX_2', 'ProjectionX_3', 'ProjectionX_4', 'ProjectionX_5', 'ProjectionX_6', 'ProjectionX_7', 'ProjectionX_8', 'ProjectionX_9', 'ProjectionX_10', 'ProjectionX_11', 'ProjectionX_12', 'ProjectionX_13', 'ProjectionX_14', 'ProjectionX_15', 'ProjectionX_16', 'ProjectionX_17', 'ProjectionX_18', 'ProjectionX_19', 'ProjectionX_20', 'ProjectionX_21', 'ProjectionX_22', 'ProjectionX_23', 'ProjectionX_24', 'ProjectionX_25', 'ProjectionX_26', 'ProjectionX_27', 'ProjectionX_28', 'ProjectionX_29', 'ProjectionX_30', 'ProjectionX_31', 'ProjectionX_32', 'ProjectionX_33', 'ProjectionX_34', 'ProjectionX_35', 'ProjectionX_36', 'ProjectionX_37', 'ProjectionX_38', 'ProjectionX_39', 'ProjectionX_40', 'ProjectionX_41', 'ProjectionX_42', 'ProjectionX_43', 'ProjectionX_44', 'ProjectionX_45', 'ProjectionX_46', 'ProjectionX_47', 'ProjectionX_48', 'ProjectionX_49', 'ProjectionX_50', 'ProjectionX_51', 'ProjectionX_52', 'ProjectionX_53', 'ProjectionX_54', 'ProjectionX_55', 'ProjectionX_56', 'ProjectionX_57', 'ProjectionX_58', 'ProjectionX_59', 'ProjectionX_60', 'ProjectionX_61', 'ProjectionX_62', 'ProjectionX_63', 'ProjectionX_64', 'ProjectionY_1', 'ProjectionY_2', 'ProjectionY_3', 'ProjectionY_4', 'ProjectionY_5', 'ProjectionY_6', 'ProjectionY_7', 'ProjectionY_8', 'ProjectionY_9', 'ProjectionY_10', 'ProjectionY_11', 'ProjectionY_12', 'ProjectionY_13', 'ProjectionY_14', 'ProjectionY_15', 'ProjectionY_16', 'ProjectionY_17', 'ProjectionY_18', 'ProjectionY_19', 'ProjectionY_20', 'ProjectionY_21', 'ProjectionY_22', 'ProjectionY_23', 'ProjectionY_24', 'ProjectionY_25', 'ProjectionY_26', 'ProjectionY_27', 'ProjectionY_28', 'ProjectionY_29', 'ProjectionY_30', 'ProjectionY_31', 'ProjectionY_32', 'ProjectionY_33', 'ProjectionY_34', 'ProjectionY_35', 'ProjectionY_36', 'ProjectionY_37', 'ProjectionY_38', 'ProjectionY_39', 'ProjectionY_40', 'ProjectionY_41', 'ProjectionY_42', 'ProjectionY_43', 'ProjectionY_44', 'ProjectionY_45', 'ProjectionY_46', 'ProjectionY_47', 'ProjectionY_48', 'ProjectionY_49', 'ProjectionY_50', 'ProjectionY_51', 'ProjectionY_52', 'ProjectionY_53', 'ProjectionY_54', 'ProjectionY_55', 'ProjectionY_56', 'ProjectionY_57', 'ProjectionY_58', 'ProjectionY_59', 'ProjectionY_60', 'ProjectionY_61', 'ProjectionY_62', 'ProjectionY_63', 'ProjectionY_64'};
    predictors = inputTable(:, predictorNames);
    response = inputTable.OrientationFlags;
    isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

    % Train a classifier
    % This code specifies all the classifier options and trains the classifier.
    template = templateSVM(...
        'KernelFunction', 'polynomial', ...
        'Standardize', true);
    classificationSVM = fitcecoc(...
        predictors, ...
        response, ...
        'Learners', template, ...
        'Coding', 'onevsone', ...
        'ClassNames', ['**'; '*0'; '*1'; '00'; '01'; '10'; '11'], ...
        'OptimizeHyperparameters', {'Coding', 'BoxConstraint', 'KernelScale', 'PolynomialOrder'}, ...
        'HyperparameterOptimizationOptions', struct('UseParallel', true, 'MaxObjectiveEvaluations', 60));

    compactClassifier = compact(classificationSVM);
    
    % Add additional fields to the result struct
    trainedClassifier.RequiredVariables = {'Mean', 'Stdev', 'HOG', 'ProjectionX', 'ProjectionY'};
    trainedClassifier.UncompactedClassifier = classificationSVM;
    trainedClassifier.ClassificationSVM = compactClassifier;
    trainedClassifier.predictFcn = create_predictFcn(compactClassifier);
    trainedClassifier.About = 'This struct is a trained model exported from Classification Learner R2017b.';
    trainedClassifier.HowToPredict = sprintf('To make predictions on a new table, T, use: \n  yfit = c.predictFcn(T) \nreplacing ''c'' with the name of the variable that is this struct, e.g. ''trainedModel''. \n \nThe table, T, must contain the variables returned by: \n  c.RequiredVariables \nVariable formats (e.g. matrix/vector, datatype) must match the original training data. \nAdditional variables are ignored. \n \nFor more information, see <a href="matlab:helpview(fullfile(docroot, ''stats'', ''stats.map''), ''appclassification_exportmodeltoworkspace'')">How to predict using an exported model</a>.');

    % Extract predictors and response
    % This code processes the data into the right shape for training the
    % model.
    inputTable = trainingData;
    % Split matrices in the input table into vectors
    inputTable = [inputTable(:,setdiff(inputTable.Properties.VariableNames, {'HOG', 'ProjectionX', 'ProjectionY'})), array2table(table2array(inputTable(:,{'HOG', 'ProjectionX', 'ProjectionY'})), 'VariableNames', {'HOG_1', 'HOG_2', 'HOG_3', 'HOG_4', 'HOG_5', 'HOG_6', 'HOG_7', 'HOG_8', 'HOG_9', 'HOG_10', 'HOG_11', 'HOG_12', 'HOG_13', 'HOG_14', 'HOG_15', 'HOG_16', 'HOG_17', 'HOG_18', 'HOG_19', 'HOG_20', 'HOG_21', 'HOG_22', 'HOG_23', 'HOG_24', 'HOG_25', 'HOG_26', 'HOG_27', 'HOG_28', 'HOG_29', 'HOG_30', 'HOG_31', 'HOG_32', 'HOG_33', 'HOG_34', 'HOG_35', 'HOG_36', 'ProjectionX_1', 'ProjectionX_2', 'ProjectionX_3', 'ProjectionX_4', 'ProjectionX_5', 'ProjectionX_6', 'ProjectionX_7', 'ProjectionX_8', 'ProjectionX_9', 'ProjectionX_10', 'ProjectionX_11', 'ProjectionX_12', 'ProjectionX_13', 'ProjectionX_14', 'ProjectionX_15', 'ProjectionX_16', 'ProjectionX_17', 'ProjectionX_18', 'ProjectionX_19', 'ProjectionX_20', 'ProjectionX_21', 'ProjectionX_22', 'ProjectionX_23', 'ProjectionX_24', 'ProjectionX_25', 'ProjectionX_26', 'ProjectionX_27', 'ProjectionX_28', 'ProjectionX_29', 'ProjectionX_30', 'ProjectionX_31', 'ProjectionX_32', 'ProjectionX_33', 'ProjectionX_34', 'ProjectionX_35', 'ProjectionX_36', 'ProjectionX_37', 'ProjectionX_38', 'ProjectionX_39', 'ProjectionX_40', 'ProjectionX_41', 'ProjectionX_42', 'ProjectionX_43', 'ProjectionX_44', 'ProjectionX_45', 'ProjectionX_46', 'ProjectionX_47', 'ProjectionX_48', 'ProjectionX_49', 'ProjectionX_50', 'ProjectionX_51', 'ProjectionX_52', 'ProjectionX_53', 'ProjectionX_54', 'ProjectionX_55', 'ProjectionX_56', 'ProjectionX_57', 'ProjectionX_58', 'ProjectionX_59', 'ProjectionX_60', 'ProjectionX_61', 'ProjectionX_62', 'ProjectionX_63', 'ProjectionX_64', 'ProjectionY_1', 'ProjectionY_2', 'ProjectionY_3', 'ProjectionY_4', 'ProjectionY_5', 'ProjectionY_6', 'ProjectionY_7', 'ProjectionY_8', 'ProjectionY_9', 'ProjectionY_10', 'ProjectionY_11', 'ProjectionY_12', 'ProjectionY_13', 'ProjectionY_14', 'ProjectionY_15', 'ProjectionY_16', 'ProjectionY_17', 'ProjectionY_18', 'ProjectionY_19', 'ProjectionY_20', 'ProjectionY_21', 'ProjectionY_22', 'ProjectionY_23', 'ProjectionY_24', 'ProjectionY_25', 'ProjectionY_26', 'ProjectionY_27', 'ProjectionY_28', 'ProjectionY_29', 'ProjectionY_30', 'ProjectionY_31', 'ProjectionY_32', 'ProjectionY_33', 'ProjectionY_34', 'ProjectionY_35', 'ProjectionY_36', 'ProjectionY_37', 'ProjectionY_38', 'ProjectionY_39', 'ProjectionY_40', 'ProjectionY_41', 'ProjectionY_42', 'ProjectionY_43', 'ProjectionY_44', 'ProjectionY_45', 'ProjectionY_46', 'ProjectionY_47', 'ProjectionY_48', 'ProjectionY_49', 'ProjectionY_50', 'ProjectionY_51', 'ProjectionY_52', 'ProjectionY_53', 'ProjectionY_54', 'ProjectionY_55', 'ProjectionY_56', 'ProjectionY_57', 'ProjectionY_58', 'ProjectionY_59', 'ProjectionY_60', 'ProjectionY_61', 'ProjectionY_62', 'ProjectionY_63', 'ProjectionY_64'})];

    predictorNames = {'Mean', 'Stdev', 'HOG_1', 'HOG_2', 'HOG_3', 'HOG_4', 'HOG_5', 'HOG_6', 'HOG_7', 'HOG_8', 'HOG_9', 'HOG_10', 'HOG_11', 'HOG_12', 'HOG_13', 'HOG_14', 'HOG_15', 'HOG_16', 'HOG_17', 'HOG_18', 'HOG_19', 'HOG_20', 'HOG_21', 'HOG_22', 'HOG_23', 'HOG_24', 'HOG_25', 'HOG_26', 'HOG_27', 'HOG_28', 'HOG_29', 'HOG_30', 'HOG_31', 'HOG_32', 'HOG_33', 'HOG_34', 'HOG_35', 'HOG_36', 'ProjectionX_1', 'ProjectionX_2', 'ProjectionX_3', 'ProjectionX_4', 'ProjectionX_5', 'ProjectionX_6', 'ProjectionX_7', 'ProjectionX_8', 'ProjectionX_9', 'ProjectionX_10', 'ProjectionX_11', 'ProjectionX_12', 'ProjectionX_13', 'ProjectionX_14', 'ProjectionX_15', 'ProjectionX_16', 'ProjectionX_17', 'ProjectionX_18', 'ProjectionX_19', 'ProjectionX_20', 'ProjectionX_21', 'ProjectionX_22', 'ProjectionX_23', 'ProjectionX_24', 'ProjectionX_25', 'ProjectionX_26', 'ProjectionX_27', 'ProjectionX_28', 'ProjectionX_29', 'ProjectionX_30', 'ProjectionX_31', 'ProjectionX_32', 'ProjectionX_33', 'ProjectionX_34', 'ProjectionX_35', 'ProjectionX_36', 'ProjectionX_37', 'ProjectionX_38', 'ProjectionX_39', 'ProjectionX_40', 'ProjectionX_41', 'ProjectionX_42', 'ProjectionX_43', 'ProjectionX_44', 'ProjectionX_45', 'ProjectionX_46', 'ProjectionX_47', 'ProjectionX_48', 'ProjectionX_49', 'ProjectionX_50', 'ProjectionX_51', 'ProjectionX_52', 'ProjectionX_53', 'ProjectionX_54', 'ProjectionX_55', 'ProjectionX_56', 'ProjectionX_57', 'ProjectionX_58', 'ProjectionX_59', 'ProjectionX_60', 'ProjectionX_61', 'ProjectionX_62', 'ProjectionX_63', 'ProjectionX_64', 'ProjectionY_1', 'ProjectionY_2', 'ProjectionY_3', 'ProjectionY_4', 'ProjectionY_5', 'ProjectionY_6', 'ProjectionY_7', 'ProjectionY_8', 'ProjectionY_9', 'ProjectionY_10', 'ProjectionY_11', 'ProjectionY_12', 'ProjectionY_13', 'ProjectionY_14', 'ProjectionY_15', 'ProjectionY_16', 'ProjectionY_17', 'ProjectionY_18', 'ProjectionY_19', 'ProjectionY_20', 'ProjectionY_21', 'ProjectionY_22', 'ProjectionY_23', 'ProjectionY_24', 'ProjectionY_25', 'ProjectionY_26', 'ProjectionY_27', 'ProjectionY_28', 'ProjectionY_29', 'ProjectionY_30', 'ProjectionY_31', 'ProjectionY_32', 'ProjectionY_33', 'ProjectionY_34', 'ProjectionY_35', 'ProjectionY_36', 'ProjectionY_37', 'ProjectionY_38', 'ProjectionY_39', 'ProjectionY_40', 'ProjectionY_41', 'ProjectionY_42', 'ProjectionY_43', 'ProjectionY_44', 'ProjectionY_45', 'ProjectionY_46', 'ProjectionY_47', 'ProjectionY_48', 'ProjectionY_49', 'ProjectionY_50', 'ProjectionY_51', 'ProjectionY_52', 'ProjectionY_53', 'ProjectionY_54', 'ProjectionY_55', 'ProjectionY_56', 'ProjectionY_57', 'ProjectionY_58', 'ProjectionY_59', 'ProjectionY_60', 'ProjectionY_61', 'ProjectionY_62', 'ProjectionY_63', 'ProjectionY_64'};
    predictors = inputTable(:, predictorNames);
    response = inputTable.OrientationFlags;
    isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

    % Perform cross-validation
    partitionedModel = crossval(trainedClassifier.UncompactedClassifier, 'KFold', 5);

    % Compute validation predictions
    [validationPredictions, validationScores] = kfoldPredict(partitionedModel);

    % Compute validation accuracy
    validationAccuracy = 1 - kfoldLoss(partitionedModel, 'LossFun', 'ClassifError');
end


function fn = create_predictFcn(classificationSVM)
    predictorNames = {'Mean', 'Stdev', 'HOG_1', 'HOG_2', 'HOG_3', 'HOG_4', 'HOG_5', 'HOG_6', 'HOG_7', 'HOG_8', 'HOG_9', 'HOG_10', 'HOG_11', 'HOG_12', 'HOG_13', 'HOG_14', 'HOG_15', 'HOG_16', 'HOG_17', 'HOG_18', 'HOG_19', 'HOG_20', 'HOG_21', 'HOG_22', 'HOG_23', 'HOG_24', 'HOG_25', 'HOG_26', 'HOG_27', 'HOG_28', 'HOG_29', 'HOG_30', 'HOG_31', 'HOG_32', 'HOG_33', 'HOG_34', 'HOG_35', 'HOG_36', 'ProjectionX_1', 'ProjectionX_2', 'ProjectionX_3', 'ProjectionX_4', 'ProjectionX_5', 'ProjectionX_6', 'ProjectionX_7', 'ProjectionX_8', 'ProjectionX_9', 'ProjectionX_10', 'ProjectionX_11', 'ProjectionX_12', 'ProjectionX_13', 'ProjectionX_14', 'ProjectionX_15', 'ProjectionX_16', 'ProjectionX_17', 'ProjectionX_18', 'ProjectionX_19', 'ProjectionX_20', 'ProjectionX_21', 'ProjectionX_22', 'ProjectionX_23', 'ProjectionX_24', 'ProjectionX_25', 'ProjectionX_26', 'ProjectionX_27', 'ProjectionX_28', 'ProjectionX_29', 'ProjectionX_30', 'ProjectionX_31', 'ProjectionX_32', 'ProjectionX_33', 'ProjectionX_34', 'ProjectionX_35', 'ProjectionX_36', 'ProjectionX_37', 'ProjectionX_38', 'ProjectionX_39', 'ProjectionX_40', 'ProjectionX_41', 'ProjectionX_42', 'ProjectionX_43', 'ProjectionX_44', 'ProjectionX_45', 'ProjectionX_46', 'ProjectionX_47', 'ProjectionX_48', 'ProjectionX_49', 'ProjectionX_50', 'ProjectionX_51', 'ProjectionX_52', 'ProjectionX_53', 'ProjectionX_54', 'ProjectionX_55', 'ProjectionX_56', 'ProjectionX_57', 'ProjectionX_58', 'ProjectionX_59', 'ProjectionX_60', 'ProjectionX_61', 'ProjectionX_62', 'ProjectionX_63', 'ProjectionX_64', 'ProjectionY_1', 'ProjectionY_2', 'ProjectionY_3', 'ProjectionY_4', 'ProjectionY_5', 'ProjectionY_6', 'ProjectionY_7', 'ProjectionY_8', 'ProjectionY_9', 'ProjectionY_10', 'ProjectionY_11', 'ProjectionY_12', 'ProjectionY_13', 'ProjectionY_14', 'ProjectionY_15', 'ProjectionY_16', 'ProjectionY_17', 'ProjectionY_18', 'ProjectionY_19', 'ProjectionY_20', 'ProjectionY_21', 'ProjectionY_22', 'ProjectionY_23', 'ProjectionY_24', 'ProjectionY_25', 'ProjectionY_26', 'ProjectionY_27', 'ProjectionY_28', 'ProjectionY_29', 'ProjectionY_30', 'ProjectionY_31', 'ProjectionY_32', 'ProjectionY_33', 'ProjectionY_34', 'ProjectionY_35', 'ProjectionY_36', 'ProjectionY_37', 'ProjectionY_38', 'ProjectionY_39', 'ProjectionY_40', 'ProjectionY_41', 'ProjectionY_42', 'ProjectionY_43', 'ProjectionY_44', 'ProjectionY_45', 'ProjectionY_46', 'ProjectionY_47', 'ProjectionY_48', 'ProjectionY_49', 'ProjectionY_50', 'ProjectionY_51', 'ProjectionY_52', 'ProjectionY_53', 'ProjectionY_54', 'ProjectionY_55', 'ProjectionY_56', 'ProjectionY_57', 'ProjectionY_58', 'ProjectionY_59', 'ProjectionY_60', 'ProjectionY_61', 'ProjectionY_62', 'ProjectionY_63', 'ProjectionY_64'};
    
    % Create the result struct with predict function
    splitMatricesInTableFcn = @(t) [t(:,setdiff(t.Properties.VariableNames, {'HOG', 'ProjectionX', 'ProjectionY'})), array2table(table2array(t(:,{'HOG', 'ProjectionX', 'ProjectionY'})), 'VariableNames', {'HOG_1', 'HOG_2', 'HOG_3', 'HOG_4', 'HOG_5', 'HOG_6', 'HOG_7', 'HOG_8', 'HOG_9', 'HOG_10', 'HOG_11', 'HOG_12', 'HOG_13', 'HOG_14', 'HOG_15', 'HOG_16', 'HOG_17', 'HOG_18', 'HOG_19', 'HOG_20', 'HOG_21', 'HOG_22', 'HOG_23', 'HOG_24', 'HOG_25', 'HOG_26', 'HOG_27', 'HOG_28', 'HOG_29', 'HOG_30', 'HOG_31', 'HOG_32', 'HOG_33', 'HOG_34', 'HOG_35', 'HOG_36', 'ProjectionX_1', 'ProjectionX_2', 'ProjectionX_3', 'ProjectionX_4', 'ProjectionX_5', 'ProjectionX_6', 'ProjectionX_7', 'ProjectionX_8', 'ProjectionX_9', 'ProjectionX_10', 'ProjectionX_11', 'ProjectionX_12', 'ProjectionX_13', 'ProjectionX_14', 'ProjectionX_15', 'ProjectionX_16', 'ProjectionX_17', 'ProjectionX_18', 'ProjectionX_19', 'ProjectionX_20', 'ProjectionX_21', 'ProjectionX_22', 'ProjectionX_23', 'ProjectionX_24', 'ProjectionX_25', 'ProjectionX_26', 'ProjectionX_27', 'ProjectionX_28', 'ProjectionX_29', 'ProjectionX_30', 'ProjectionX_31', 'ProjectionX_32', 'ProjectionX_33', 'ProjectionX_34', 'ProjectionX_35', 'ProjectionX_36', 'ProjectionX_37', 'ProjectionX_38', 'ProjectionX_39', 'ProjectionX_40', 'ProjectionX_41', 'ProjectionX_42', 'ProjectionX_43', 'ProjectionX_44', 'ProjectionX_45', 'ProjectionX_46', 'ProjectionX_47', 'ProjectionX_48', 'ProjectionX_49', 'ProjectionX_50', 'ProjectionX_51', 'ProjectionX_52', 'ProjectionX_53', 'ProjectionX_54', 'ProjectionX_55', 'ProjectionX_56', 'ProjectionX_57', 'ProjectionX_58', 'ProjectionX_59', 'ProjectionX_60', 'ProjectionX_61', 'ProjectionX_62', 'ProjectionX_63', 'ProjectionX_64', 'ProjectionY_1', 'ProjectionY_2', 'ProjectionY_3', 'ProjectionY_4', 'ProjectionY_5', 'ProjectionY_6', 'ProjectionY_7', 'ProjectionY_8', 'ProjectionY_9', 'ProjectionY_10', 'ProjectionY_11', 'ProjectionY_12', 'ProjectionY_13', 'ProjectionY_14', 'ProjectionY_15', 'ProjectionY_16', 'ProjectionY_17', 'ProjectionY_18', 'ProjectionY_19', 'ProjectionY_20', 'ProjectionY_21', 'ProjectionY_22', 'ProjectionY_23', 'ProjectionY_24', 'ProjectionY_25', 'ProjectionY_26', 'ProjectionY_27', 'ProjectionY_28', 'ProjectionY_29', 'ProjectionY_30', 'ProjectionY_31', 'ProjectionY_32', 'ProjectionY_33', 'ProjectionY_34', 'ProjectionY_35', 'ProjectionY_36', 'ProjectionY_37', 'ProjectionY_38', 'ProjectionY_39', 'ProjectionY_40', 'ProjectionY_41', 'ProjectionY_42', 'ProjectionY_43', 'ProjectionY_44', 'ProjectionY_45', 'ProjectionY_46', 'ProjectionY_47', 'ProjectionY_48', 'ProjectionY_49', 'ProjectionY_50', 'ProjectionY_51', 'ProjectionY_52', 'ProjectionY_53', 'ProjectionY_54', 'ProjectionY_55', 'ProjectionY_56', 'ProjectionY_57', 'ProjectionY_58', 'ProjectionY_59', 'ProjectionY_60', 'ProjectionY_61', 'ProjectionY_62', 'ProjectionY_63', 'ProjectionY_64'})];
    extractPredictorsFromTableFcn = @(t) t(:, predictorNames);
    predictorExtractionFcn = @(x) extractPredictorsFromTableFcn(splitMatricesInTableFcn(x));
    svmPredictFcn = @(x) predict(classificationSVM, x);
    fn = @(x) svmPredictFcn(predictorExtractionFcn(x));
end